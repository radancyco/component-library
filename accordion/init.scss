/*!

  Radancy Component Library: Accordion

  Contributor(s):
  Michael "Spell" Spellacy

  Dependencies: Sass

*/

.accordion {

// Component Variables

--accordion-arrow-size: 0.8em; // Toggle Arrow Size
--accordion-arrow-border: calc(2rem / 16); // Toggle Arrow Border.
--accordion-close-size: calc(30rem / 16); // Close Button Size
--accordion-color-active: #a9a9a9; // Active State
--accordion-color-default: #d3d3d3; // Default States
--accordion-color-selected: #6F00EF; // Selected States
--accordion-column-large: 4; // Horizontal Layout (Large Vieport)
--accordion-column-medium: 2; // Horizontal Layout (Medium Vieport)
--accordion-gap: calc(5rem / 16); // Accordion Gap
--accordion-panel-border: calc(2rem /16) transparent solid; // Sets border on pointer and panel. Not for use with default animation.
--accordion-panel-default: #d3d3d3; // Panel State (Default)
--accordion-pointer-size: calc(25rem / 16); // Content Pointer Size

// Breakpoints (CSS variables are not allowed in media queries - boo!)

$accordion-large: 55em; // Large Viewport
$accordion-medium: 37.5em; // Medium Viewport

display: grid;
grid-template-columns: 1fr;
gap: var(--accordion-gap);
grid-auto-flow: dense;
position: relative;
margin: 0;

  // Accordion Defaults & Resets: Do not remove!

  dd, &__heading {
  all: unset;
  }
      
  > ol, > ul, > dl, > ul > li, &__heading {
  display: contents;
  } 

  // Horizontal Layout

  &[data-horizontal] {

    @media (min-width: $accordion-medium) {

      grid-template-columns: repeat(var(--accordion-column-medium), 1fr); 

    }

    @media (min-width: $accordion-large) {

      grid-template-columns: repeat(var(--accordion-column-large), 1fr); 

    }
      
  }

  // Accordion Toggle Arrow

  &__arrow {
  block-size: var(--accordion-arrow-size);
  border-width: var(--accordion-arrow-border);
  border-block-color: transparent var(--accordion-color-selected);
  border-block-start-width: 0;
  border-inline-color: var(--accordion-color-selected) transparent;
  border-inline-end-width: 0;
  border-style: solid;
  content: "";
  direction: ltr;
  display: block;
  inline-size: var(--accordion-arrow-size);
  justify-self: end;
  margin-block-start: calc(var(--accordion-arrow-border) * -2);
  margin-inline-start: 0.5em;
  transform: rotate(-45deg);
  
    [data-context] & {
  
      @media (min-width: $accordion-medium) {
  
        display: none;
  
      }
  
    }
  
  }

  // Accordion Close Button

  &__close {
  background-color: transparent;
  block-size: var(--accordion-close-size);
  border: 0;
  cursor: pointer;
  display: grid;
  float: inline-end;
  inline-size: var(--accordion-close-size);
  justify-items: center;
  margin: 0;
  margin-block-end: 1em;
  margin-inline-start: 1em;
  padding: 0;

    &:after, &::before {
    background-color: #000;
    block-size: 100%;
    content: "";
    display: block;
    grid-area: 1 / 1;
    inline-size: calc(2rem / 16);
    }

    &::after {
    transform: rotate(-45deg);
    }

    &::before {
    transform: rotate(45deg);
    }

  }

  // Accordion Toggle Button

  &__toggle {
  align-items: center;
  background-color: var(--accordion-color-default);
  border: 0;
  color: inherit;
  cursor: pointer;
  display: grid;
  font-size: inherit;
  grid-template-columns: auto 1fr;
  line-height: 1.5;
  padding: 1em;
  position: relative;
  text-align: start;

    // Accordion Animation

    [data-animation] & {

      @media (prefers-reduced-motion: no-preference) {
  
        transition: 300ms;

      }

    }

    // Viewport Context

    [data-context] & {

      @media (min-width: $accordion-medium) {

        pointer-events: none;
        visibility: hidden;

          span {
          color: var(--accordion-color-selected);
          visibility: visible;
          }

      }

    }

    // Horizontal Layout

    [data-horizontal] & {

      @media (min-width: $accordion-medium) {
      
        padding: 1.5em;

      }

    }

    // Horizontal Layout (Overlay): Hides buttons when overlay is "active"

    [data-overlay][data-active] & {
      
      display: none;
    
    }

    // Content Pointer

    [data-pointer] & {

      &::after {
      background-color: var(--accordion-panel-default);
      block-size: var(--accordion-pointer-size);
      border-inline-start: var(--accordion-panel-border);
      border-block-start: var(--accordion-panel-border);
      content: "";
      display: none;
      inline-size: var(--accordion-pointer-size);
      inset-block-end: calc(var(--accordion-pointer-size) * -1);
      inset-inline-end: 0;
      inset-inline-start: 50%;
      pointer-events: none;
      position: absolute;
      transform: rotate(45deg) translateX(-50%);
      z-index: 1;

        // Accordion Animation

        [data-animation] & {

          opacity: 0;
          translate: 0 var(--accordion-pointer-size);

        }

      }   

    }

    // Accessibility: Focus and hover states must meet a 3:1 color ratio between background color and foreground text.
    // The project designer should be providing this state. Also, never remove focus outlines! Either redesign them or 
    // design an alternative focus state. Learn: https://webaim.org/articles/contrast/

    &:focus-visible, &:hover {
    background-color: var(--accordion-color-active);
    }

    &:focus-visible {
    outline-offset: -5px;
    }

    // Accordion Toggle Button: Behavior

    &[aria-expanded="true"] {
    background-color: var(--accordion-color-selected);
    color: #fff;

      [data-animation][data-pointer] & { 

        // Content Pointer: Animated
          
        &::after {
        opacity: 1;
        translate: 0 .1rem;

          @media (prefers-reduced-motion: no-preference) {

            transition-behavior: allow-discreate;
            transition-delay: 300ms;
            transition-duration: 800ms;
            transition-property: display opacity translate;
            transition-timing-function: ease-in;

          }

          @starting-style {

            opacity: 0;
            translate: 0 var(--accordion-pointer-size);

          }

        }

      }

      // Conent Pointer

      [data-pointer] & { 

        &::after {
        display: block;
        }

      }

      // Accordion Toggle Arrow

      .accordion__arrow {
      border-block-end-color: #fff;
      border-inline-start-color: #fff;
      transform: rotate(135deg);
      translate: 0 calc(8rem/16);

        [data-pointer] & {

          display: none;

        }

      }

    }

  }

  // Accordion Panel

  &__panel {
  background-color: var(--accordion-panel-default);
  display: none;
  margin-top: calc(var(--accordion-gap) * -1);
  overflow: hidden;
  padding: 1em;
  position: relative;

    // Accordion Animation

    [data-animation] & {

      max-height: 0;
      opacity: 0;

      @media (prefers-reduced-motion: no-preference) {

        transition-behavior: allow-discreate;
        transition-duration: 1s;
        transition-property: display opacity max-height;
        transition-timing-function: ease-in-out;

      }

    }

    // Horizontal Layout

    [data-horizontal] & {
    border: var(--accordion-panel-border);
    margin-top: auto;

      @media (min-width: $accordion-medium) {

        grid-column: 1 / span var(--accordion-column-medium);

      }

      @media (min-width: $accordion-large) {

        grid-column: 1 / span var(--accordion-column-large);

      }

    }

    // Fixed Height

    [data-fixed-height] & {

      max-height: 18.75em;
      overflow-y: auto;
      overscroll-behavior-y: contain;
      scrollbar-color: var(--accordion-color-active) var(--accordion-color-default);
      scrollbar-gutter: stable;
      scrollbar-width: thin;

    }

    // Viewport Context

    [data-context] & {

      @media (min-width: $accordion-medium) {

        background-color: transparent;
        display: block;

      }

    }

  }

  // Accordion Panel Reveal

  &__toggle[aria-expanded="true"] + &__panel, &__heading:has(&__toggle[aria-expanded="true"]) + &__panel {
  display: block;
  
    [data-animation] & {
    opacity: 1;
    max-height: 5000px;

      @starting-style {
      opacity: 0;
      max-height: 0;
      }
  
    }

  }

}